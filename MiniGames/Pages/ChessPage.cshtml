@page
@using Models.Helper;
@using Chess.EventArguments;
@using Chess;
@model ChessPageModel
@{
    ViewData["Title"] = "Play";
}

<main id="main" class="container-fluid text-center">
    <div id="timeView" class="row" style="display:none;">
        <h4 id="timeName"></h4>
        <p id="timeStatus"></p>
    </div>

    <div id="findOpponent" class="row m-5">
        <div class="mx-auto my-auto text-center">
            <p id="status" class="row help-block m-3 text-center">Nazwa użytkownika</p>
            <div class="form-inline">
                <div class="form-group mr-2" id="usernameGroup">
                    <label class="sr-only control-label" for="username">Użytkownik</label>
                    <input type="text" class="form-control" id="username" />
                </div>
                <button type="submit" id="findGame" class="btn btn-primary">Znajdź przeciwnika</button>
                <p id="hidden" class="help-block" style="visibility:hidden"></p>
            </div>
        </div>
    </div>
</main>

<div id="playground" style="display:none">
    <div id="boardContainer" class="col-xs-12 col-sm-12 col-md-6" style="width:800px; margin:0 auto; padding:0px;">
        <div id="board" class="row chessboard col-12" style="margin:0px;padding:0px;">

        </div>
    </div>
</div>




<script type="text/javascript">

    $(function () {
        var connection = new signalR.HubConnectionBuilder().withUrl("/gameHub").build();
        var playerId;
        var playerColor;
        var playerName;
        var gameOver;

        function displayWindowSize() {
            var w = $('#boardContainer').width();
            $('.square').width(w / 8);
            $('.square').height(w / 8);
            $('.square > img').width(w / 8);

            $('#options').width(w);
        }

    window.addEventListener("resize", displayWindowSize);

        document.getElementById("findGame").disabled = true;

        connection.start().then(function () {
            document.getElementById("findGame").disabled = false;
        });

        connection.on("PlayerJoined", function (player) {
            playerId = player.id;
        });


        connection.on("GameOver", function (gameOver, winner) {
            var t = @(Html.EnumToString<GameOver>());
            document.getElementById('timeStatus').innerText = winner.userName + " przegrał przez mata ";
            document.getElementById('timeStatus').style.color = "purple";
            endGame();
        });

        connection.on("WaitingList", function () {
            $('#status').html("Szuka przeciwnika");
        });

        $('#findGame').click(function () {
            var chosenUsername = $('#username').val();
            connection.invoke("FindGame", chosenUsername);
            document.getElementById("findGame").disabled = true;
        });

        $('#username').keypress(function (e) {
            if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                $('#findGame').click();
                return false;
            }
            return true;
        });

        connection.on("Start", function (game) {
            if (game.id != "") {
                document.getElementById('findOpponent').style.display = "none";
                playerColor = (playerId == game.player1.id) ? game.player1.color : game.player2.color;
                setupPlayground(game);
                document.getElementById('playground').style.display = "block";
                document.getElementById('timeView').style.display = "block";
                Update(game);
                playerName = (playerId == game.player1.id) ? game.player1.userName : game.player2.userName;
                document.getElementById('timeName').innerText = "Nazwa gracza: " + playerName;
                displayWindowSize();
                updateStatus(game.movingPlayer.userName);
            }
        });

        connection.on("MoveDone", function (game, move) {
            Update(game);
            if (!gameOver) {
                updateStatus(game.movingPlayer.userName);
            }
        });

        function endGame() {
            gameOver = true;
            document.getElementById('baord').style.pointerEvents = "none";
        }

        connection.on("ShowPossibleMoves", function (game) {
            var board = document.getElementById('board');
            resetPossibleMoves(board);
            for (i = 0; i < 64; i++) {
                    if (game.chessBoard.squares[i].possibleMove) {
                        board.children[(game.movingPlayer.color == 0) ? i : 63 - i].classList.add('dropzone');
                    }
                    if (game.chessBoard.squares[i].isSelected) {
                        board.children[(game.movingPlayer.color == 0) ? i : 63 - i].firstChild.id = 'selected';
                    }
                }
        });


        function setupPlayground(game) {
            var t = @(Html.EnumToString<Color>());          
        }

        function resetBoard() {
            var board = document.getElementById('board');
            board.innerHTML = "";
        }

        function resetPossibleMoves(board) {
            for (i = 0; i < board.children.length; i++) {
                board.children[i].classList.remove("dropzone");
                if (board.children[i].firstChild != null) {
                        board.children[i].firstChild.id = "";
                    }
            };
        }

        function Update(game) {
            resetBoard();
            var b = document.getElementById('board');
            game.chessBoard.squares.forEach(entry => {
                var child = document.createElement("div");
                child.classList.add(entry.name);
                var t = @(Html.EnumToString<Color>());
                child.classList.add("square");
                child.classList.add(t[entry.color].toLowerCase());

                if (entry.piece != null) {
                    var svg = document.createElement("img");

                    svg.src = "/images/" + t[entry.piece.color].toLowerCase() + "_" + entry.piece.name + ".svg";
                    child.appendChild(svg);

                    if (entry.piece.color == playerColor) {
                        if (/Android|webOS|Opera Mini/i.test(navigator.userAgent)) {
                            child.addEventListener("mousedown", function () {
                            connection.invoke("PieceSelected", entry.position.posX, entry.position.posY);
                            child.firstChild.classList.add(entry.name);
                        });
                        }
                        else {
                            child.addEventListener("mousedown", function () {
                            connection.invoke("PieceSelected", entry.position.posX, entry.position.posY);
                            child.firstChild.classList.add(entry.name);
                        });
                        }

                        child.firstChild.classList.add("drag-drop");
                    }
                }

                b.appendChild(child);
            });

            if (playerColor == 1) {
                reverseChildren(b);
            }

            displayWindowSize();
        }

        function reverseChildren(parent) {
            for (var i = 1; i < parent.childNodes.length; i++) {
                parent.insertBefore(parent.childNodes[i], parent.firstChild);
            }
        }
        		let startPos = {x:-1,y:-1};


interact('.drag-drop').draggable({
	inertia: true,
	snap: {
      targets: [startPos],
      relativePoints: [ { x: 0, y: 0 } ],
      endOnly: true,
    },
	listeners: {
		start (event) {
			var rect = interact.getElementRect(event.target);

				startPos = {
					x: rect.left,
					y: rect.top
				}

				event.interactable.options.drag.snap.targets = [startPos];
		},
		move (event) {
			var target = event.target,
			x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
			y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

			target.style.webkitTransform =
			target.style.transform = 'translate(' + x + 'px, ' + y + 'px)';

			target.setAttribute('data-x', x);
			target.setAttribute('data-y', y);
        },
        end (event) {
            var test = "";
        }
	}
});

        interact('.dropzone').dropzone({
    accept: '#selected',
	overlap: 'center',
	ondragenter: function (event) {
		var dropRect = interact.getElementRect(event.target),
		    dropTarget = {
		      x: dropRect.left,
		      y: dropRect.top
		    };
    event.draggable.draggable({
      snap: { targets: [dropTarget] },
    });

		var draggableElement = event.relatedTarget,
            dropzoneElement = event.target;

        dropzoneElement.classList.add('drop-target');
        draggableElement.classList.add('can-drop');
	},
            ondragleave: function (event) {
        event.draggable.draggable({
      snap: { targets: [startPos] },
    });
        event.target.classList.remove('drop-target');
        event.relatedTarget.classList.remove('can-drop');
	},
	ondropactivate: function (event) {
        event.target.classList.add('drop-active');
    },
	ondropdeactivate: function (event) {
        event.target.classList.remove('drop-active');
        event.target.classList.remove('drop-target');
    },
            ondrop: function (event) {
                event.draggable.draggable({ snap: { targets: [] } });
                var piece = event.relatedTarget.classList[1];
                var square = event.target.classList[0];
                connection.invoke("MoveSelected", piece, square);
            },
            ondown: function (event) {
                var t = "Test";
            }
});
    });

</script>

